/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zlikun.jee.api;

import com.zlikun.jee.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-14T10:19:36.648Z")
@Api(value = "user", tags = "user", description = "用户API")
public interface UserApi {

    @ApiOperation(value = "创建用户", nickname = "createUser", notes = "This can only be done by the logged in user.", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/user",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@ApiParam(value = "Created user object", required = true) @Valid @RequestBody User body);


    @ApiOperation(value = "删除用户", nickname = "deleteUser", notes = "只能由登录用户调用", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid username supplied"),
            @ApiResponse(code = 404, message = "User not found")})
    @RequestMapping(value = "/user/{username}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "根据用户名查询用户信息", nickname = "getUserByName", notes = "", response = User.class, tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = User.class),
            @ApiResponse(code = 400, message = "Invalid username supplied"),
            @ApiResponse(code = 404, message = "User not found")})
    @RequestMapping(value = "/user/{username}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched. ", required = true) @PathVariable("username") String username);


    @ApiOperation(value = "用户登录", nickname = "loginUser", notes = "", response = String.class, tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = String.class),
            @ApiResponse(code = 400, message = "Invalid username/password supplied")})
    @RequestMapping(value = "/user/login",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.POST)
    ResponseEntity<String> loginUser(@NotNull @ApiParam(value = "登录用户名", required = true) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @ApiParam(value = "登录密码", required = true) @Valid @RequestParam(value = "password", required = true) String password);


    @ApiOperation(value = "用户登出", nickname = "logoutUser", notes = "", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/user/logout",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();


    @ApiOperation(value = "更新用户", nickname = "updateUser", notes = "只能由登录用户调用", tags = {"user",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid user supplied"),
            @ApiResponse(code = 404, message = "User not found")})
    @RequestMapping(value = "/user/{username}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "name that need to be updated", required = true) @PathVariable("username") String username, @ApiParam(value = "Updated user object", required = true) @Valid @RequestBody User body);

}
