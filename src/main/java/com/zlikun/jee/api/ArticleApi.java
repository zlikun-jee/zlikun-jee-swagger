/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.zlikun.jee.api;

import com.zlikun.jee.model.Article;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@Api(value = "article", tags = "article", description = "文章API")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-14T10:19:36.648Z")
public interface ArticleApi {

    @ApiOperation(value = "添加一篇文章", nickname = "addArticle", notes = "", authorizations = {
            @Authorization(value = "api_auth", scopes = {
                    @AuthorizationScope(scope = "write:articles", description = "modify articles in your account"),
                    @AuthorizationScope(scope = "read:articles", description = "read your articles")
            })
    }, tags = {"article",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/article",
            produces = {"application/json", "application/xml"},
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.POST)
    ResponseEntity<Void> addArticle(@ApiParam(value = "Article object that needs to be added to the store", required = true) @Valid @RequestBody Article body);


    @ApiOperation(value = "Deletes a article", nickname = "deleteArticle", notes = "", authorizations = {
            @Authorization(value = "api_auth", scopes = {
                    @AuthorizationScope(scope = "write:articles", description = "modify articles in your account"),
                    @AuthorizationScope(scope = "read:articles", description = "read your articles")
            })
    }, tags = {"article",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Article not found")})
    @RequestMapping(value = "/article/{articleId}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteArticle(@ApiParam(value = "Article id to delete", required = true) @PathVariable("articleId") Long articleId, @ApiParam(value = "") @RequestHeader(value = "api_key", required = false) String apiKey);


    @ApiOperation(value = "Find article by ID", nickname = "getArticleById", notes = "Returns a single article", response = Article.class, authorizations = {
            @Authorization(value = "api_key")
    }, tags = {"article",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = Article.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Article not found")})
    @RequestMapping(value = "/article/{articleId}",
            produces = {"application/json", "application/xml"},
            method = RequestMethod.GET)
    ResponseEntity<Article> getArticleById(@ApiParam(value = "ID of article to return", required = true) @PathVariable("articleId") Long articleId);


    @ApiOperation(value = "Update an existing article", nickname = "updateArticle", notes = "", authorizations = {
            @Authorization(value = "api_auth", scopes = {
                    @AuthorizationScope(scope = "write:articles", description = "modify articles in your account"),
                    @AuthorizationScope(scope = "read:articles", description = "read your articles")
            })
    }, tags = {"article",})
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Article not found"),
            @ApiResponse(code = 405, message = "Validation exception")})
    @RequestMapping(value = "/article",
            produces = {"application/json", "application/xml"},
            consumes = {"application/json", "application/xml"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateArticle(@ApiParam(value = "Article object that needs to be added to the store", required = true) @Valid @RequestBody Article body);


    @ApiOperation(value = "Updates a article in the store with form data", nickname = "updateArticleWithForm", notes = "", authorizations = {
            @Authorization(value = "api_auth", scopes = {
                    @AuthorizationScope(scope = "write:articles", description = "modify articles in your account"),
                    @AuthorizationScope(scope = "read:articles", description = "read your articles")
            })
    }, tags = {"article",})
    @ApiResponses(value = {
            @ApiResponse(code = 405, message = "Invalid input")})
    @RequestMapping(value = "/article/{articleId}",
            produces = {"application/json", "application/xml"},
            consumes = {"application/x-www-form-urlencoded"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> updateArticleWithForm(@ApiParam(value = "ID of article that needs to be updated", required = true) @PathVariable("articleId") Long articleId, @ApiParam(value = "Updated name of the article") @RequestParam(value = "name", required = false) String name, @ApiParam(value = "Updated status of the article") @RequestParam(value = "status", required = false) String status);

}
