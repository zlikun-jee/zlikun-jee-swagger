swagger: '2.0'
info:
  description: >-
    个人博客API契约，用于实现前后端分离开发
  version: 1.0.0
  title: 个人博客API契约
  termsOfService: 'https://swagger.io/terms/'
  contact:
    email: zlikun-dev@hotmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.zlikun.com
basePath: /v1
tags:
  - name: user
    description: 用户APIs
    externalDocs:
      description: 更多信息
      url: 'https://api.zlikun.com/v1/docs'
  - name: article
    description: 文章APIs
    externalDocs:
      description: 更多信息
      url: 'https://api.zlikun.com/v1/docs'
schemes:
  - https
  - http
paths:
  /user:
    post:
      tags:
        - user
      summary: 创建用户
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    post:
      tags:
        - user
      summary: 用户登录
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: 登录用户名
          required: true
          type: string
        - name: password
          in: query
          description: 登录密码
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: 用户登出
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: 根据用户名查询用户信息
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: 更新用户
      description: 只能由登录用户调用
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: 删除用户
      description: 只能由登录用户调用
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /article:
    post:
      tags:
        - article
      summary: 添加一篇文章
      description: ''
      operationId: addArticle
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Article object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Article'
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:articles'
            - 'read:articles'
    put:
      tags:
        - article
      summary: Update an existing article
      description: ''
      operationId: updateArticle
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Article object that needs to be added to the store
          required: true
          schema:
            $ref: '#/definitions/Article'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:articles'
            - 'read:articles'
  '/article/{articleId}':
    get:
      tags:
        - article
      summary: Find article by ID
      description: Returns a single article
      operationId: getArticleById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: articleId
          in: path
          description: ID of article to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Article'
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
      security:
        - api_key: []
    put:
      tags:
        - article
      summary: Updates a article in the store with form data
      description: ''
      operationId: updateArticleWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      parameters:
        - name: articleId
          in: path
          description: ID of article that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          description: Updated name of the article
          required: false
          type: string
        - name: status
          in: formData
          description: Updated status of the article
          required: false
          type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:articles'
            - 'read:articles'
    delete:
      tags:
        - article
      summary: Deletes a article
      description: ''
      operationId: deleteArticle
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: articleId
          in: path
          description: Article id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Article not found
      security:
        - petstore_auth:
            - 'write:articles'
            - 'read:articles'
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'https://api.zlikun.com/oauth/dialog'
    flow: implicit
    scopes:
      'write:articles': modify articles in your account
      'read:articles': read your articles
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  Article:
    type: object
    required:
      - title
      - content
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
        example: API契约测试实践
      content:
        type: string
    xml:
      name: Article
externalDocs:
  description: Swagger官网
  url: 'https://swagger.io'
